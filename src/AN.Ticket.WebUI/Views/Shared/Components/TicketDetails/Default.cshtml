@using AN.Ticket.Domain.Enums
@model AN.Ticket.WebUI.ViewModels.Ticket.TicketDetailViewModel

@if (Model != null && Model.Id != Guid.Empty)
{
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center bg-light">
            <div class="d-flex align-items-center">
                <i class="bi bi-calendar-event-fill me-2"></i>
                <h5 class="mb-0">@Model.Subject</h5>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-4">
                <div class="row">
                    <div class="col-md-6">
                        <strong><i class="bi bi-hash"></i> Código do Ticket:</strong>
                        <p class="mb-0 text-muted">@Model.TicketCode</p>
                    </div>
                    <div class="col-md-6">
                        <strong><i class="bi bi-envelope-fill"></i> Email:</strong>
                        <p class="mb-0 text-muted">@Model.Email</p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-6">
                        <strong><i class="bi bi-telephone-fill"></i> Telefone:</strong>
                        <p class="mb-0 text-muted">@Model.Phone</p>
                    </div>
                    <div class="col-md-6">
                        <strong><i class="bi bi-person-circle"></i> Suporte:</strong>
                        <p class="mb-0 text-muted">@GetTicketUserFullName(Model.User?.FullName)</p>
                    </div>
                </div>
            </div>

            <div class="mb-4">
                <div class="row">
                    <div class="col-md-6">
                        <strong><i class="bi bi-clock me-1"></i> Data de Criação:</strong>
                        <p class="mb-0 text-muted">@Model.CreatedAt.ToString("dd/MM/yyyy")</p>
                    </div>
                    <div class="col-md-6">
                        <strong><i class="bi bi-calendar-range-fill me-1"></i> Data de Vencimento:</strong>
                        <p class="mb-0 text-muted">@Model.DueDate.ToString("dd/MM/yyyy")</p>
                    </div>
                </div>
                @if (Model.ClosedAt.HasValue)
                {
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <strong><i class="bi bi-check-circle-fill"></i> Data de Fechamento:</strong>
                            <p class="mb-0 text-muted">@Model.ClosedAt?.ToString("dd/MM/yyyy")</p>
                        </div>
                    </div>
                }
                @if (Model.FirstResponseAt.HasValue)
                {
                    <div class="row mt-3">
                        <div class="col-md-6">
                            <strong><i class="bi bi-reply-fill"></i> Primeira Resposta:</strong>
                            <p class="mb-0 text-muted">@Model.FirstResponseAt?.ToString("dd/MM/yyyy")</p>
                        </div>
                    </div>
                }
            </div>

            <div class="mb-4">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Status:</strong>
                        <span class="badge @GetStatusBadgeClass(Model.Status)">@TranslateTicketStatus(Model.Status)</span>
                    </div>
                    <div class="col-md-6">
                        <strong>Prioridade:</strong>
                        <span class="badge @GetPriorityBadgeClass(Model.Priority)">@TranslateTicketPriority(Model.Priority)</span>
                    </div>
                </div>
            </div>

            @if (Model.Messages?.Count > 0)
            {
                <div class="mb-4">
                    <h6>Histórico de Mensagens</h6>
                    <ul class="list-group list-group-flush">
                        @foreach (var message in Model.Messages.Take(3))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-start border rounded @GetMessageBackgroundClass(message.IsFromSupport)">
                                <div class="flex-grow-1">
                                    <strong>@GetUserFullName(message.User?.FullName)</strong>
                                    <span class="text-muted small">(@GetMessageSource(message.UserId == Guid.Empty ? false : true))</span>
                                    <small class="text-muted d-block">@FormatMessageSentAt(message.SentAt)</small>
                                    <p class="mb-0">@message.Message</p>
                                </div>
                            </li>
                        }
                    </ul>
                    @if (Model.Messages.Count > 3)
                    {
                        <div class="mt-3 text-end">
                            <a href="@Url.Action("Details", "Ticket", new { id = Model.Id })" class="btn btn-outline-primary btn-sm">Ver mais mensagens</a>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    Nenhuma mensagem registrada para este ticket.
                </div>
            }
        </div>
    </div>
}
else
{
    <div class="text-center">
        <p class="fs-3">Nenhum Ticket associado</p>
        <p>Os detalhes sobre o Ticket que você deseja inserir serão exibidos aqui.</p>
    </div>
}

@section Styles {
    <style>
        .card {
            border-radius: 12px;
        }

        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            border-radius: 12px 12px 0 0;
        }

        .list-group-item {
            background-color: #ffffff;
            padding: 1rem;
        }

        .list-group-item.border {
            border: 1px solid #ddd;
        }

        .list-group-item:hover {
            background-color: #f1f1f1;
        }

        .badge {
            font-size: 0.9em;
            padding: 0.4em 0.75em;
        }

        .alert {
            border-radius: 8px;
        }
    </style>
}

@functions {
    public string TranslateTicketStatus(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Onhold => "Em Espera",
            TicketStatus.Open => "Aberto",
            TicketStatus.InProgress => "Em Progresso",
            TicketStatus.Closed => "Fechado",
            _ => "Indefinido",
        };
    }

    public string TranslateTicketPriority(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "Baixa",
            TicketPriority.Medium => "Média",
            TicketPriority.High => "Alta",
            _ => "Indefinido",
        };
    }

    public string GetMessageSource(bool isFromSupport)
    {
        return isFromSupport ? "Suporte" : "Cliente";
    }

    public string GetUserFullName(string fullName)
    {
        return string.IsNullOrWhiteSpace(fullName) ? "Usuário Desconhecido" : fullName;
    }

    public string FormatMessageSentAt(DateTime? sentAt)
    {
        return sentAt.HasValue ? sentAt.Value.ToString("dd/MM/yyyy HH:mm") : "Data não disponível";
    }

    public string GetTicketUserFullName(string fullName)
    {
        return string.IsNullOrWhiteSpace(fullName) ? "Não atribuído" : fullName;
    }

    public string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Onhold => "bg-info",
            TicketStatus.Open => "bg-primary",
            TicketStatus.InProgress => "bg-warning text-dark",
            TicketStatus.Closed => "bg-success",
            _ => "bg-secondary",
        };
    }

    public string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.High => "bg-danger",
            TicketPriority.Medium => "bg-warning text-dark",
            TicketPriority.Low => "bg-secondary",
            _ => "bg-secondary",
        };
    }

    public string GetMessageBackgroundClass(bool isFromSupport)
    {
        return isFromSupport ? "" : "bg-light";
    }
}
