@using AN.Ticket.Domain.Enums
@using AN.Ticket.WebUI.ViewModels.Activity
@model AN.Ticket.WebUI.ViewModels.Activity.ActivityListViewModel

@{
    ViewData["Title"] = "Atividades";
}

@await Component.InvokeAsync("Breadcrumb")

<div class="container mt-4">
    <div class="mb-3">
        <h1 class="h4">Gerenciamento de Atividades</h1>
        <p class="text-muted">Gerencie suas atividades e suas informações aqui.</p>
    </div>

    <div class="card">
        <div class="card-body p-3">
            <!-- Responsividade para desktop -->
            <div class="d-none d-md-flex justify-content-between align-items-center mb-3">
                <h6 class="text-muted">Todas as atividades @Model.TotalItems</h6>
                <div class="d-flex align-items-center">
                    <div class="input-group me-2" style="width: 300px;">
                        <input type="text" class="form-control" placeholder="Pesquisar" value="@Model.SearchTerm" id="searchTerm">
                        <span class="input-group-text"><i class="bi bi-search"></i></span>
                    </div>
                    <button class="btn btn-outline-secondary me-2 px-4" style="height: 40px;" onclick="applyFilter()">
                        <i class="bi bi-funnel"></i> Filtros
                    </button>
                    <a href="/Activity/Create" class="btn btn-dark px-4" style="height: 40px;">+ Adicionar atividade</a>
                    <button id="deleteSelectedBtn" class="btn btn-outline-danger ms-2 px-4" style="height: 40px; display: none;" onclick="deleteSelected()">
                        <i class="bi bi-trash"></i> Excluir Selecionadas
                    </button>
                </div>
            </div>

            <!-- Responsividade para mobile -->
            <div class="d-flex d-md-none row mb-3 align-items-center">
                <div class="col-md-6">
                    <h6 class="text-muted">Todas as atividades @Model.TotalItems</h6>
                </div>
                <div class="col-md-6">
                    <div class="row">
                        <div class="col-md-5">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Pesquisar" value="@Model.SearchTerm" id="searchTerm">
                                <span class="input-group-text"><i class="bi bi-search"></i></span>
                            </div>
                        </div>
                        <div class="col-md-2 mt-2">
                            <button class="btn btn-outline-secondary w-100" onclick="applyFilter()">
                                <i class="bi bi-funnel"></i> Filtros
                            </button>
                        </div>
                        <div class="col-md-3 mt-2">
                            <a href="/Activity/Create" class="btn btn-dark w-100">+ Adicionar atividade</a>
                        </div>
                        <div class="col-md-2 mt-2">
                            <button id="deleteSelectedBtn" class="btn btn-outline-danger w-100" style="display: none;" onclick="deleteSelected()">
                                <i class="bi bi-trash"></i> Excluir Selecionadas
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <form asp-action="DeleteActivities" method="post" id="deleteForm">
                @Html.AntiForgeryToken()
                <table class="table table-borderless table-hover align-middle mb-0">
                    <thead style="background-color: #F4F5F7; border-radius: 10px 10px 0 0;">
                        <tr style="border-radius: 10px; background-color: #F4F5F7;">
                            <th scope="col" style="width: 1%; border-top-left-radius: 10px;">
                                <input type="checkbox" id="selectAll">
                            </th>
                            <th scope="col" style="width: 25%;">Assunto</th>
                            <th scope="col" class="d-none d-md-table-cell">Tipo</th>
                            <th scope="col" class="d-none d-md-table-cell">Data Agendada</th>
                            <th scope="col" class="d-none d-md-table-cell">Duração</th>
                            <th scope="col" class="d-none d-md-table-cell">Prioridade</th>
                            <th scope="col" style="width: 5%; border-top-right-radius: 10px;">Ações</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var activity in Model.Activities)
                        {
                            <tr style="border-bottom: 1px solid #E0E0E0;">
                                <td>
                                    <input type="checkbox" class="selectActivity" name="ids" value="@activity.Id">
                                </td>
                                <td>
                                    <div class="fw-bold">@activity.Subject</div>
                                </td>
                                <td class="d-none d-md-table-cell">
                                    <span class="badge bg-primary">@TranslateActivityType(activity.Type)</span>
                                </td>
                                <td class="d-none d-md-table-cell">@activity.ScheduledDate.ToString("dd/MM/yyyy")</td>
                                <td class="d-none d-md-table-cell">@activity.Duration.ToString(@"hh\:mm")</td>
                                <td class="d-none d-md-table-cell">
                                    <span class="badge @(GetPriorityBadgeClass(activity.Priority))">@TranslatePriority(activity.Priority)</span>
                                </td>
                                <td>
                                    @await Html.PartialAsync("~/Views/Shared/Partials/Activity/_ActivityActionsDropdown.cshtml", activity.Id)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </form>
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <span class="text-muted">Mostrando @((Model.PageNumber - 1) * Model.PageSize + 1) a @(Model.PageNumber * Model.PageSize) de @Model.TotalItems entradas</span>
        </div>
        @if (Model.TotalItems > 10)
        {
            <nav aria-label="Navegação de página">
                <ul class="pagination mb-0">
                    @if (Model.PageNumber > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber - 1, pageSize = Model.PageSize, searchTerm = Model.SearchTerm })" aria-label="Anterior">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    @for (var i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, pageSize = Model.PageSize, searchTerm = Model.SearchTerm })">@i</a>
                        </li>
                    }
                    @if (Model.PageNumber < Model.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { pageNumber = Model.PageNumber + 1, pageSize = Model.PageSize, searchTerm = Model.SearchTerm })" aria-label="Próximo">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
        }
    </div>
</div>

@functions {
    public string TranslatePriority(ActivityPriority priority)
    {
        return priority switch
        {
            ActivityPriority.Low => "Baixo",
            ActivityPriority.Medium => "Médio",
            ActivityPriority.High => "Alta",
            _ => priority.ToString(),
        };
    }

    public string TranslateActivityType(ActivityType type)
    {
        return type switch
        {
            ActivityType.Task => "Tarefa",
            ActivityType.Event => "Evento",
            _ => type.ToString(),
        };
    }

    public string GetPriorityBadgeClass(ActivityPriority priority)
    {
        return priority switch
        {
            ActivityPriority.Low => "bg-success",
            ActivityPriority.Medium => "bg-warning",
            ActivityPriority.High => "bg-danger",
            _ => "bg-secondary"
        };
    }
}

@section Scripts {
    <script>
        document.getElementById('selectAll').addEventListener('change', function () {
            var checkboxes = document.querySelectorAll('.selectActivity');
            var selectAll = this.checked;
            checkboxes.forEach(function (checkbox) {
                checkbox.checked = selectAll;
            });
            toggleDeleteButton();
        });

        document.querySelectorAll('.selectActivity').forEach(function (checkbox) {
            checkbox.addEventListener('change', function () {
                toggleDeleteButton();
            });
        });

        function toggleDeleteButton() {
            var anyChecked = document.querySelectorAll('.selectActivity:checked').length > 0;
            var deleteButtons = document.querySelectorAll('#deleteSelectedBtn');

            deleteButtons.forEach(function (button) {
                button.style.display = anyChecked ? 'inline-block' : 'none';
            });
        }

        function deleteSelected() {
            var form = document.getElementById('deleteForm');
            form.submit();
        }

        function applyFilter() {
            var searchTerm = document.getElementById('searchTerm').value;
            var url = '@Url.Action("Index", new { pageNumber = 1, pageSize = Model.PageSize })';
            window.location.href = url + '&searchTerm=' + encodeURIComponent(searchTerm);
        }

        document.getElementById('searchTerm').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                applyFilter();
            }
        });
    </script>
}