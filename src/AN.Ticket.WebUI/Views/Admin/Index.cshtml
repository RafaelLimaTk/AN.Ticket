@using AN.Ticket.Domain.Enums
@model AN.Ticket.WebUI.ViewModels.Admin.AdminViewModel

@{
    ViewData["Title"] = "Administração";

    var assetOrderOptions = new List<(string Value, string Text)>
    {
        ("PurchaseDate", "Ordenar por Data de Compra"),
        ("DepreciationDate", "Ordenar por Data de Depreciação")
    };

    var currentTime = DateTime.Now.TimeOfDay;
    string greeting;

    if (currentTime >= TimeSpan.FromHours(5) && currentTime < TimeSpan.FromHours(12))
    {
        greeting = "Bom dia";
    }
    else if (currentTime >= TimeSpan.FromHours(12) && currentTime < TimeSpan.FromHours(18))
    {
        greeting = "Boa tarde";
    }
    else
    {
        greeting = "Boa noite";
    }
}

<div class="container mt-4">
    <div class="row align-items-center mb-4">
        <div class="col-12 col-md-8">
            <p class="text-muted mb-1">@DateTime.Now.ToString("dddd, dd 'de' MMMM")</p>
            <h1 class="h3">@greeting! @ViewBag.FirstName,</h1>
        </div>

        <div class="col-12 col-md-4 d-flex justify-content-md-end header-buttons">
            <a href="@Url.Action("Create", "User")" class="btn btn-outline-primary"><i class="bi bi-plus"></i> Adicionar Usuário</a>
        </div>
    </div>

    <div class="d-flex flex-wrap summary-section mb-4">
        <div class="summary-card">
            <i class="bi bi-clock"></i>
            <span>@Model.TicketMetrics.TempoEconomizadoHoras<span class="m-0">hrs</span></span> Tempo Economizado
        </div>
        <div class="summary-card">
            <i class="bi bi-check-circle"></i>
            <span>@Model.TicketMetrics.TicketsConcluidos</span> Tickets Concluídos
        </div>
        <div class="summary-card">
            <i class="bi bi-hourglass-split"></i>
            <span>@Model.TicketMetrics.TicketsEmAndamento</span> Tickets em Andamento
        </div>
    </div>

    <h5>Ações Rápidas</h5>
    <div class="row g-3 mb-4">
        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Dashboard", "Admin")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-house"></i>
                    <span>Dashboard</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "Setting")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-gear"></i>
                    <span>Configurações</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "User")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-people"></i>
                    <span>Gerenciamento de Usuários</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "Asset")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-box-seam"></i>
                    <span>Ativos</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "Department")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-building"></i>
                    <span>Departamento</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "Contact")" class="text-decoration-none">
                <div class="quick-action-card">
                    <i class="bi bi-person"></i>
                    <span>Cliente</span>
                </div>
            </a>
        </div>

        <div class="col-12 col-md-4 col-lg-3">
            <a href="@Url.Action("Index", "Activity")" class="text-decoration-none" aria-label="Acessar Atividades">
                <div class="quick-action-card">
                    <i class="bi bi-calendar-check" aria-hidden="true"></i>
                    <span>Atividade</span>
                </div>
            </a>
        </div>
    </div>


    <div class="card p-3 mb-4 bg-white rounded">
        <div class="mb-2">
            <h5>Gerenciamento de Tickets</h5>
            <p class="text-muted">Gerencie os Tickets e suas atribuições aqui.</p>
        </div>

        <div class="row mb-3">
            <div class="col-md-4">
                <input type="text" class="form-control" id="ticketSearch" placeholder="Pesquisar por assunto ou contato" value="@Model.Tickets.SearchTerm">
            </div>
            <div class="col-md-4">
                @{
                    var orderOptionsList = new List<(string Value, string Text)>
                    {
                        ("CreatedAt", "Ordenar por Data de Criação"),
                        ("Subject", "Ordenar por Assunto"),
                        ("Priority", "Ordenar por Prioridade")
                    };
                }

                <select class="form-select" id="ticketOrderBy">
                    @foreach (var option in orderOptionsList)
                    {
                        if (Model.Tickets.OrderBy == option.Value)
                        {
                            <option value="@option.Value" selected>@option.Text</option>
                        }
                        else
                        {
                            <option value="@option.Value">@option.Text</option>
                        }
                    }
                </select>
            </div>
            <div class="col-md-4">
                <button class="btn btn-primary w-100" onclick="applyFilters()">Aplicar Filtros</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table align-middle">
                <thead>
                    <tr>
                        <th scope="col"><i class="bi bi-card-text"></i> Assunto</th>
                        <th scope="col"><i class="bi bi-person"></i> Atribuído</th>
                        <th scope="col" class="d-none d-lg-table-cell"><i class="bi bi-info-circle"></i> Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ticket in Model.Tickets.Tickets)
                    {
                        <tr>
                            <td>
                                <i class="bi bi-chat-left-text me-2 d-none d-md-inline"></i> @ticket.Subject
                                <div class="d-inline ms-3 text-muted small d-none d-md-inline">
                                    <i class="bi bi-chat-left"></i> @ticket.MessagesCount <i class="bi bi-paperclip ms-3"></i> @ticket.AttachmentsCount
                                </div>
                            </td>
                            <td>
                                <form asp-action="AssignTicket" method="post">
                                    <input type="hidden" name="ticketId" value="@ticket.Id" />
                                    <div class="input-group input-group-sm">
                                        <select class="form-select custom-select-with-images" name="userId" required>
                                            @if (ticket.User == null)
                                            {
                                                <option value="" disabled selected>Nenhum Usuário Atribuído</option>
                                            }
                                            else
                                            {
                                                <option value="" disabled>Nenhum Usuário Atribuído</option>
                                            }

                                            @foreach (var user in ViewBag.UserAssigned)
                                            {
                                                if (ticket.User != null && ticket.User.Id == user.Id)
                                                {
                                                    <option value="@user.Id" selected>@user.FullName</option>
                                                }
                                                else
                                                {
                                                    <option value="@user.Id">@user.FullName</option>
                                                }
                                            }
                                        </select>
                                        <button type="submit" class="btn btn-primary btn-sm">Atribuir</button>
                                    </div>
                                </form>
                            </td>
                            <td class="d-none d-lg-table-cell">
                                <span class="badge @GetStatusClass(ticket.Status)">
                                    @GetStatusLabel(ticket.Status)
                                </span>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-between align-items-center mt-3">
            <div>
                <span class="text-muted">Mostrando @((Model.Tickets.PageNumber - 1) * Model.Tickets.PageSize + 1) a @(Math.Min(Model.Tickets.PageNumber * Model.Tickets.PageSize, Model.Tickets.TotalItems)) de @Model.Tickets.TotalItems tickets</span>
            </div>
            @if (Model.Tickets.TotalItems > Model.Tickets.PageSize)
            {
            <nav aria-label="Navegação de página">
                <ul class="pagination mb-0">
                    @if (Model.Tickets.PageNumber > 1)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { ticketPageNumber = Model.Tickets.PageNumber - 1, ticketPageSize = Model.Tickets.PageSize, ticketSearchTerm = Model.Tickets.SearchTerm, ticketOrderBy = Model.Tickets.OrderBy })" aria-label="Anterior">
                                <span aria-hidden="true">&laquo;</span>
                            </a>
                        </li>
                    }
                    @for (var i = 1; i <= Model.Tickets.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.Tickets.PageNumber ? "active" : "")">
                            <a class="page-link" href="@Url.Action("Index", new { ticketPageNumber = i, ticketPageSize = Model.Tickets.PageSize, ticketSearchTerm = Model.Tickets.SearchTerm, ticketOrderBy = Model.Tickets.OrderBy })">@i</a>
                        </li>
                    }
                    @if (Model.Tickets.PageNumber < Model.Tickets.TotalPages)
                    {
                        <li class="page-item">
                            <a class="page-link" href="@Url.Action("Index", new { ticketPageNumber = Model.Tickets.PageNumber + 1, ticketPageSize = Model.Tickets.PageSize, ticketSearchTerm = Model.Tickets.SearchTerm, ticketOrderBy = Model.Tickets.OrderBy })" aria-label="Próximo">
                                <span aria-hidden="true">&raquo;</span>
                            </a>
                        </li>
                    }
                </ul>
            </nav>
            }
        </div>
    </div>

    <div class="row">
        <div class="col-12 col-md-6 mb-4">
            <div id="depreciated-assets-card" class="card p-3 rounded d-flex flex-column" style="height: 477px;">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h5 class="asset-title mb-0">Ativos Depreciados</h5>
                    <form method="get" action="@Url.Action("Index", "Admin")" class="d-flex">
                        <input type="hidden" name="ticketPageNumber" value="@Model.Tickets.PageNumber" />
                        <input type="hidden" name="ticketPageSize" value="@Model.Tickets.PageSize" />
                        <input type="hidden" name="ticketSearchTerm" value="@Model.Tickets.SearchTerm" />
                        <input type="hidden" name="ticketOrderBy" value="@Model.Tickets.OrderBy" />

                        <select class="form-select me-2" name="assetOrderBy">
                            @foreach (var option in assetOrderOptions)
                            {
                                if (Model.Assets.OrderBy == option.Value)
                                {
                                    <option value="@option.Value" selected>@option.Text</option>
                                }
                                else
                                {
                                    <option value="@option.Value">@option.Text</option>
                                }
                            }
                        </select>
                        <button class="btn btn-outline-secondary" type="submit">Filtrar</button>
                    </form>
                </div>

                <div class="asset-list flex-grow-1 overflow-auto" style="max-height: 320px;">
                    @foreach (var asset in Model.Assets.Assets)
                    {
                        <div class="asset-item mb-3 p-2 border rounded bg-light d-flex justify-content-between align-items-center">
                            <div>
                                <strong class="asset-name">@asset.Name</strong>
                                <div class="text-muted small d-flex align-items-center">
                                    <span>Depreciado há @(DateTime.Now.Year - asset.PurchaseDate.Year) anos</span>
                                    <span class="mx-1">&bull;</span>
                                    <span>Comprado em @asset.PurchaseDate.ToString("dd/MM/yyyy")</span>
                                </div>
                            </div>
                            <a asp-action="Edit" asp-controller="Asset" asp-route-id="@asset.Id" class="btn btn-outline-secondary btn-sm d-flex align-items-center">
                                <i class="bi bi-eye"></i>
                            </a>
                        </div>
                    }
                </div>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <div>
                        <span class="text-muted">Mostrando @((Model.Assets.PageNumber - 1) * Model.Assets.PageSize + 1) a @(Math.Min(Model.Assets.PageNumber * Model.Assets.PageSize, Model.Assets.TotalItems)) de @Model.Assets.TotalItems ativos</span>
                    </div>
                    @if (Model.Assets.TotalItems > Model.Assets.PageSize)
                    {
                        <nav aria-label="Navegação de página">
                        <ul class="pagination mb-0">
                            @if (Model.Assets.PageNumber > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new {
                                        ticketPageNumber = Model.Tickets.PageNumber,
                                        ticketPageSize = Model.Tickets.PageSize,
                                        ticketSearchTerm = Model.Tickets.SearchTerm,
                                        ticketOrderBy = Model.Tickets.OrderBy,
                                        assetPageNumber = Model.Assets.PageNumber - 1,
                                        assetPageSize = Model.Assets.PageSize,
                                        assetPurchaseDate = Model.Assets.SearchTerm,
                                        assetOrderBy = Model.Assets.OrderBy
                                    })" aria-label="Anterior">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }
                            @for (var i = 1; i <= Model.Assets.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.Assets.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new {
                                        ticketPageNumber = Model.Tickets.PageNumber,
                                        ticketPageSize = Model.Tickets.PageSize,
                                        ticketSearchTerm = Model.Tickets.SearchTerm,
                                        ticketOrderBy = Model.Tickets.OrderBy,
                                        assetPageNumber = i,
                                        assetPageSize = Model.Assets.PageSize,
                                        assetPurchaseDate = Model.Assets.SearchTerm,
                                        assetOrderBy = Model.Assets.OrderBy
                                    })">@i</a>
                                </li>
                            }
                            @if (Model.Assets.PageNumber < Model.Assets.TotalPages)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("Index", new {
                                        ticketPageNumber = Model.Tickets.PageNumber,
                                        ticketPageSize = Model.Tickets.PageSize,
                                        ticketSearchTerm = Model.Tickets.SearchTerm,
                                        ticketOrderBy = Model.Tickets.OrderBy,
                                        assetPageNumber = Model.Assets.PageNumber + 1,
                                        assetPageSize = Model.Assets.PageSize,
                                        assetPurchaseDate = Model.Assets.SearchTerm,
                                        assetOrderBy = Model.Assets.OrderBy
                                    })" aria-label="Próximo">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                    }
                </div>
            </div>
        </div>

        <div class="col-12 col-md-6 mb-4">
            <div id="notes-card" class="card p-3 rounded" style="height: 477px; display: flex; flex-direction: column;">
                <h5 class="note-title"><i class="bi bi-journal-text me-2"></i> Notas</h5>

                <ul id="notes-list" class="list-unstyled mt-3 flex-grow-1 overflow-auto" style="max-height: 300px;">
                </ul>

                <div class="d-flex justify-content-between align-items-center mt-3">
                    <span id="notes-count" class="text-muted"></span>
                    <nav id="pagination" aria-label="Paginação">
                        <ul class="pagination mb-0">
                        </ul>
                    </nav>
                </div>

                <div class="mt-3 sticky-bottom">
                    <input id="note-input" type="text" class="form-control" placeholder="Adicionar nova nota..." />
                    <div class="d-flex justify-content-between mt-2">
                        <button class="btn btn-primary w-50 me-1" onclick="addNote()">Adicionar Nota</button>
                        <button class="btn btn-outline-danger w-50 ms-1" onclick="clearNotes()">Limpar Todas</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetStatusClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Open => "badge-open",
            TicketStatus.InProgress => "badge-inprogress",
            TicketStatus.Onhold => "badge-onhold",
            TicketStatus.Closed => "badge-closed",
            _ => "badge-unknown"
        };
    }

    private string GetStatusLabel(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Open => "Aberto",
            TicketStatus.InProgress => "Em Progresso",
            TicketStatus.Onhold => "Em Espera",
            TicketStatus.Closed => "Fechado",
            _ => "Desconhecido"
        };
    }
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin.css" />
}

@section Scripts {
    <script>
        const adminId = "admin_123";
        const NOTES_KEY = `notes_${adminId}`;
        const NOTES_PER_PAGE = 4;
        let currentPage = 1;

        function loadNotes() {
            const notes = JSON.parse(localStorage.getItem(NOTES_KEY)) || [];
            const notesList = document.getElementById("notes-list");
            notesList.innerHTML = "";

            const startIndex = (currentPage - 1) * NOTES_PER_PAGE;
            const paginatedNotes = notes.slice(startIndex, startIndex + NOTES_PER_PAGE);

            paginatedNotes.forEach((note, index) => {
                const li = document.createElement("li");
                li.className = "d-flex align-items-center mb-2 note-item";

                const checkbox = document.createElement("input");
                checkbox.type = "checkbox";
                checkbox.className = "me-2 note-checkbox";
                checkbox.checked = note.checked;
                checkbox.addEventListener("change", () => toggleNoteStatus(index + startIndex));

                const contentDiv = document.createElement("div");
                contentDiv.className = "note-content";
                contentDiv.style.textDecoration = note.checked ? "line-through" : "none";
                contentDiv.innerText = note.text;

                const deleteBtn = document.createElement("button");
                deleteBtn.className = "btn btn-sm btn-outline-danger ms-auto note-delete-btn";
                deleteBtn.innerHTML = '<i class="bi bi-trash"></i>';
                deleteBtn.addEventListener("click", () => deleteNote(index + startIndex));

                li.appendChild(checkbox);
                li.appendChild(contentDiv);
                li.appendChild(deleteBtn);
                notesList.appendChild(li);
            });

            updateNotesCount(startIndex, startIndex + paginatedNotes.length, notes.length);
            renderPagination(notes.length);
        }

        function updateNotesCount(start, end, total) {
            const notesCount = document.getElementById("notes-count");
            notesCount.textContent = `Mostrando ${start + 1} a ${end} de ${total} notas`;
        }

        function renderPagination(totalNotes) {
            const totalPages = Math.ceil(totalNotes / NOTES_PER_PAGE);
            const pagination = document.querySelector("#pagination .pagination");
            pagination.innerHTML = "";

            if (currentPage > 1) {
                const prevLi = document.createElement("li");
                prevLi.className = "page-item";
                prevLi.innerHTML = `<button class="page-link" aria-label="Anterior" onclick="goToPage(${currentPage - 1})">&laquo;</button>`;
                pagination.appendChild(prevLi);
            }

            for (let i = 1; i <= totalPages; i++) {
                const li = document.createElement("li");
                li.className = `page-item ${i === currentPage ? "active" : ""}`;
                li.innerHTML = `<button class="page-link" onclick="goToPage(${i})">${i}</button>`;
                pagination.appendChild(li);
            }

            if (currentPage < totalPages) {
                const nextLi = document.createElement("li");
                nextLi.className = "page-item";
                nextLi.innerHTML = `<button class="page-link" aria-label="Próximo" onclick="goToPage(${currentPage + 1})">&raquo;</button>`;
                pagination.appendChild(nextLi);
            }
        }

        function goToPage(page) {
            currentPage = page;
            loadNotes();
        }

        function addNote() {
            const noteInput = document.getElementById("note-input");
            const newNote = { text: noteInput.value, checked: false };

            if (newNote.text.trim() !== "") {
                const notes = JSON.parse(localStorage.getItem(NOTES_KEY)) || [];
                notes.push(newNote);
                localStorage.setItem(NOTES_KEY, JSON.stringify(notes));
                noteInput.value = "";
                currentPage = Math.ceil(notes.length / NOTES_PER_PAGE);
                loadNotes();
            }
        }

        function toggleNoteStatus(index) {
            const notes = JSON.parse(localStorage.getItem(NOTES_KEY)) || [];
            notes[index].checked = !notes[index].checked;
            localStorage.setItem(NOTES_KEY, JSON.stringify(notes));
            loadNotes();
        }

        function deleteNote(index) {
            const notes = JSON.parse(localStorage.getItem(NOTES_KEY)) || [];
            notes.splice(index, 1);
            localStorage.setItem(NOTES_KEY, JSON.stringify(notes));
            loadNotes();
        }

        function clearNotes() {
            localStorage.removeItem(NOTES_KEY);
            currentPage = 1;
            loadNotes();
        }

        document.addEventListener("DOMContentLoaded", function () {
            loadNotes();
        });

        function applyFilters() {
            var searchTerm = document.getElementById('ticketSearch').value;
            var orderBy = document.getElementById('ticketOrderBy').value;

            var url = '@Url.Action("Index")';
            window.location.href = url + '?ticketPageNumber=1&ticketPageSize=@Model.Tickets.PageSize&ticketSearchTerm=' + encodeURIComponent(searchTerm) + '&ticketOrderBy=' + encodeURIComponent(orderBy);
        }

        document.getElementById('ticketSearch').addEventListener('keypress', function (e) {
            if (e.key === 'Enter') {
                e.preventDefault();
                applyFilters();
            }
        });
    </script>
}
