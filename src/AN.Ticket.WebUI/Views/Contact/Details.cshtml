@using AN.Ticket.Domain.Enums
@model AN.Ticket.Application.DTOs.Contact.ContactDetailsDto

@{
    ViewData["Title"] = "Detalhes do Cliente";
    var listEmails = new List<string> { Model.Email };
}

@await Component.InvokeAsync("Breadcrumb")

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-12 d-flex align-items-center mb-4">
            <img src="~/img/user-default.webp" alt="Foto do Cliente" class="rounded-circle" style="width: 80px; height: 80px; object-fit: cover;">
            <div class="ms-3">
                <h3 class="mb-1">@Model.FullName</h3>
                <p class="text-muted mb-1"><i class="bi bi-building"></i> @Model.Departament</p>
                <div class="d-flex align-items-center">
                    <span class="text-muted">Última interação - @(Model.LastInteraction.HasValue ? Model.LastInteraction.Value.ToString("dd/MM/yyyy") : "Nenhuma interação registrada")</span>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-3">
            <div class="card text-center border-1">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted">Total de Tickets</h6>
                    <h5 class="card-text">@Model.TotalTickets</h5>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-1">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted">Tickets em Espera (On Hold)</h6>
                    <h5 class="card-text">@Model.OnHoldTickets</h5>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-1">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted">Tempo Médio de Resposta</h6>
                    <h5 class="card-text">@Model.AverageResponseTime.ToString(@"hh\:mm")</h5>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card text-center border-1">
                <div class="card-body p-3">
                    <h6 class="card-title text-muted">Tempo Total de Resposta</h6>
                    <h5 class="card-text">@Model.TotalResponseTime.ToString(@"hh\:mm\:ss")</h5>
                </div>
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-6">
            <h6>Detalhes do Cliente</h6>
            <ul class="list-group border-0">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Número de Telefone
                    <a href="tel:@Model.PhoneNumber">@Model.PhoneNumber</a>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    E-mail
                    <a href="mailto:@Model.Email">@Model.Email</a>
                </li>
            </ul>
        </div>
        <div class="col-md-6">
            <h6>Informações de Resposta</h6>
            <ul class="list-group border-0">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Tempo de Resposta
                    <span class="badge @(Model.ResponseTimeStatus == "Rápido" ? "bg-success" : (Model.ResponseTimeStatus == "Moderado" ? "bg-warning" : "bg-danger"))">@Model.ResponseTimeStatus</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Atribuído a
                    <span>@Model.AssignedTo</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Primeiro Contato
                    <span>@Model.FirstContactDate.ToString("dd/MM/yyyy")</span>
                </li>
            </ul>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-2">
                <h6 class="mb-0">Tickets</h6>
                <a href="javascript:void(0)" class="text-decoration-none text-primary" id="verMaisTickets">Ver Mais Tickets</a>
            </div>
            <div id="ticketListComponent">
                @await Component.InvokeAsync("TicketsDetailsContact", new { emails = listEmails, showAll = false })
            </div>
        </div>
    </div>

    <div class="row mt-5">
        <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h6 class="mb-0">Atividade de Pagamento</h6>
@*                 <a href="#" class="text-decoration-none text-primary">Ver Mais Pagamentos</a>
 *@            </div>
            <div class="list-group">
                @foreach (var payment in Model.PaymentActivities)
                {
                    <div class="list-group-item d-flex justify-content-between align-items-center">
                        <div class="d-flex align-items-center">
                            <i class="@(payment.Status == "Concluído" ? "bi bi-check-circle-fill text-success" : payment.Status == "Pendente" ? "bi bi-exclamation-circle-fill text-warning" : "bi bi-x-circle-fill text-danger") me-3"></i>
                            <div>
                                <strong>#@payment.Code</strong> Pagamento @payment.Status
                                <div class="text-muted">@payment.Method - @payment.PaymentDate.ToString("dd 'de' MMM, hh:mm tt")</div>
                            </div>
                        </div>
                        <span class="@(payment.Status == "Concluído" ? "text-success" : "text-danger") fw-bold">R$@payment.Amount</span>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@functions{
    public string GetPaymentStatusClass(string status)
    {
        return status switch
        {
            "Concluído" => "text-success",
            "Pendente" => "text-warning",
            _ => "text-danger"
        };
    }

    public string TranslateStatus(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Onhold => "Em Espera",
            TicketStatus.Open => "Aberto",
            TicketStatus.InProgress => "Em Progresso",
            TicketStatus.Closed => "Fechado",
            _ => status.ToString(),
        };
    }

    public string TranslatePriority(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "Baixo",
            TicketPriority.Medium => "Médio",
            TicketPriority.High => "Alta",
            _ => priority.ToString(),
        };
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#verMaisTickets').on('click', function () {
                const list = ["@Model.Email"];

                $.ajax({
                    url: '/Ticket/ShowAllTickets',
                    type: 'GET',
                    data: { emails: list },
                    traditional: true,
                    success: function (data) {
                        $('#ticketListComponent').html(data);
                    },
                    error: function (xhr, status, error) {
                        console.error('Erro ao carregar os tickets:', error);
                    }
                });
            });
        });
    </script>
}
